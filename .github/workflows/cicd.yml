# name: CI Pipeline

# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - main

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     services:
#       postgres:
#         image: postgres:15
#         env:
#           POSTGRES_DB: itfa_db
#           POSTGRES_USER: postgres
#           POSTGRES_PASSWORD: 1234
#         ports:
#           - 5432:5432
#         options: >-
#           --health-cmd="pg_isready -U postgres -d itfa_db"
#           --health-interval=10s
#           --health-timeout=5s
#           --health-retries=5

#     env:
#       DATABASE_NAME: itfa_db
#       DATABASE_USER: postgres
#       DATABASE_PASSWORD: 1234
#       DATABASE_HOST: 127.0.0.1
#       DATABASE_PORT: 5432

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v3

#     - name: Run backend tests
#       run: |
#         cd itfa_backend
#         python -m venv venv
#         source venv/bin/activate
#         pip install -r requirements.txt
#         python manage.py test


#     - name: Run frontend tests
#       run: |
#         cd itfa_frontend
#         npm install
#         npx ng test --no-watch --no-progress --browsers=ChromeHeadless

#     - name: Set up Docker Buildx
#       uses: docker/setup-buildx-action@v3

#     - name: Set up QEMU
#       uses: docker/setup-qemu-action@v3

#     - name: Log in to Docker Hub
#       uses: docker/login-action@v3
#       with:
#         username: ${{ secrets.DOCKER_USERNAME }}
#         password: ${{ secrets.DOCKER_PASSWORD }}

#     - name: Build and tag backend Docker image and then push
#       run: |
#         docker buildx build --tag itfa-repo/itfa-backend:latest ./itfa_backend
#         docker push itfa-repo/itfa-backend:latest

#     - name: Build and tag frontend Docker image
#       run: |
#         docker buildx build --tag itfa-repo/itfa-frontend:latest ./itfa_frontend

#     - name: Push backend Docker image
#       run: |
#         docker push itfa-repo/itfa-backend:latest

#     - name: Push frontend Docker image
#       run: |
#         docker push itfa-repo/itfa-frontend:latest

   
name: Build, Test, and Push Docker Images

on:
  push:
    branches:
      - main

jobs:
  test-backend:
    runs-on: ubuntu-latest

    env:
      DJANGO_SETTINGS_MODULE: itfa_backend.settings_test
      DB_HOST: 127.0.0.1
      DB_PORT: 5432
      DB_NAME: itfa_db
      DB_USER: postgresAdmin
      DB_PASSWORD: 1234

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'

      - name: Install dependencies and run backend tests
        run: |
          cd itfa_backend
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt
          python manage.py test

  test-frontend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install dependencies and run frontend tests
        run: |
          cd itfa_frontend
          npm install
          npx ng test --no-watch --no-progress --browsers=ChromeHeadless

  build:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Build Docker Compose services
        run: docker-compose -f docker-compose.yml build

  push:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Push Docker Images
        run: |
          services=$(docker-compose config --services)
          for service in $services; do
            IMAGE_NAME="${{ secrets.DOCKER_HUB_USERNAME }}/${service}:latest"
            docker tag ${service}:latest $IMAGE_NAME
            docker push $IMAGE_NAME
          done

      - name: Verify build
        run: docker images